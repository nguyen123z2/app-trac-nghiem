package ui

import (
	"exam-system/internal/models"
	"fmt"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/widget"
	"github.com/xuri/excelize/v2"
)

// Hi·ªÉn th·ªã danh s√°ch Student
func ShowStudentManagement(w fyne.Window) {
	searchEntry := widget.NewEntry()
	searchEntry.SetPlaceHolder("üîç Nh·∫≠p m√£ sinh vi√™n...")

	content := container.NewVBox()
	updateStudentList(w, content, searchEntry.Text)

	// B·∫Øt s·ª± ki·ªán khi nh·∫≠p v√†o √¥ t√¨m ki·∫øm
	searchEntry.OnChanged = func(text string) {
		updateStudentList(w, content, text)
	}

	title := widget.NewLabel("Qu·∫£n l√Ω Sinh vi√™n")

	// N√∫t quay l·∫°i trang admin
	backButton := widget.NewButton("‚¨Ö Quay l·∫°i", func() {
		ShowAdminManagement(w)
	})

	// N√∫t th√™m Student
	addButton := widget.NewButton("‚ûï Th√™m Sinh vi√™n", func() {
		ShowStudentForm(w, nil) // Form tr·ªëng ƒë·ªÉ th√™m m·ªõi
	})

	// N√∫t nh·∫≠p sinh vi√™n t·ª´ Excel
	importButton := widget.NewButton("üì• Nh·∫≠p t·ª´ Excel", func() {
		showImportExcelDialog(w)
	})

	// Giao di·ªán ch√≠nh
	layout := container.NewVBox(
		container.NewHBox(title, layout.NewSpacer(), backButton),
		searchEntry,
		addButton,
		importButton, // Th√™m n√∫t nh·∫≠p t·ª´ Excel v√†o giao di·ªán
		content,
	)

	w.SetContent(layout)
}
func ShowStudentManagement1(w fyne.Window) {
	searchEntry := widget.NewEntry()
	searchEntry.SetPlaceHolder("üîç Nh·∫≠p m√£ sinh vi√™n...")

	content := container.NewVBox()
	updateStudentList(w, content, searchEntry.Text)

	// B·∫Øt s·ª± ki·ªán khi nh·∫≠p v√†o √¥ t√¨m ki·∫øm
	searchEntry.OnChanged = func(text string) {
		updateStudentList(w, content, text)
	}

	title := widget.NewLabel("Qu·∫£n l√Ω Sinh vi√™n")

	// N√∫t quay l·∫°i trang admin
	backButton := widget.NewButton("‚¨Ö Quay l·∫°i", func() {
		ShowTeacherDashboard(w)
	})

	// N√∫t th√™m Student
	addButton := widget.NewButton("‚ûï Th√™m Sinh vi√™n", func() {
		ShowStudentForm1(w, nil) // Form tr·ªëng ƒë·ªÉ th√™m m·ªõi
	})

	// N√∫t nh·∫≠p sinh vi√™n t·ª´ Excel
	importButton := widget.NewButton("üì• Nh·∫≠p t·ª´ Excel", func() {
		showImportExcelDialog(w)
	})

	// Giao di·ªán ch√≠nh
	layout := container.NewVBox(
		container.NewHBox(title, layout.NewSpacer(), backButton),
		searchEntry,
		addButton,
		importButton, // Th√™m n√∫t nh·∫≠p t·ª´ Excel v√†o giao di·ªán
		content,
	)

	w.SetContent(layout)
}

// C·∫≠p nh·∫≠t danh s√°ch sinh vi√™n theo t√¨m ki·∫øm
func updateStudentList(w fyne.Window, content *fyne.Container, search string) {
	students, err := models.GetStudents(search)
	if err != nil {
		fmt.Println("‚ùå L·ªói khi l·∫•y danh s√°ch student:", err)
		return
	}

	// X√≥a danh s√°ch c≈©
	content.Objects = nil

	// Ti√™u ƒë·ªÅ b·∫£ng
	headers := container.NewHBox(
		widget.NewLabelWithStyle("M√£ SV", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
		layout.NewSpacer(),
		widget.NewLabelWithStyle("H·ªç t√™n", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
		layout.NewSpacer(),
		widget.NewLabelWithStyle("Gi·ªõi t√≠nh", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
		layout.NewSpacer(),
		widget.NewLabelWithStyle("Ng√†y sinh", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
		layout.NewSpacer(),
		widget.NewLabelWithStyle("N∆°i sinh", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
		layout.NewSpacer(),
		widget.NewLabelWithStyle("Thao t√°c", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
	)
	content.Add(headers)

	// D√≤ng ph√¢n c√°ch gi·ªØa c√°c ti√™u ƒë·ªÅ v√† d·ªØ li·ªáu
	content.Add(widget.NewSeparator())

	// T·∫°o container cho b·∫£ng sinh vi√™n
	studentList := container.NewVBox()

	// Danh s√°ch sinh vi√™n
	for _, student := range students {
		editButton := widget.NewButton("‚úè S·ª≠a", func() {
			ShowStudentForm(w, &student)
		})
		deleteButton := widget.NewButton("üóë X√≥a", func() {
			deleteStudent(w, student.ID)
		})

		// D√≤ng sinh vi√™n
		row := container.NewHBox(
			widget.NewLabel(student.StudentCode),
			layout.NewSpacer(),
			widget.NewLabel(student.Name),
			layout.NewSpacer(),
			widget.NewLabel(student.Gender),
			layout.NewSpacer(),
			widget.NewLabel(student.DateOfBirth),
			layout.NewSpacer(),
			widget.NewLabel(student.PlaceOfBirth),
			layout.NewSpacer(),
			container.NewHBox(editButton, deleteButton),
		)

		// D√≤ng ph√¢n c√°ch gi·ªØa c√°c sinh vi√™n
		studentList.Add(row)
		studentList.Add(widget.NewSeparator()) // D√≤ng ph√¢n c√°ch gi·ªØa c√°c d√≤ng sinh vi√™n
	}

	// B·ªçc danh s√°ch sinh vi√™n trong container cu·ªôn v√† ƒë·∫∑t k√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh
	scrollContainer := container.NewVScroll(studentList)
	scrollContainer.SetMinSize(fyne.NewSize(700, 400)) // ƒê·∫∑t k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu cho container cu·ªôn

	// Th√™m v√†o giao di·ªán ch√≠nh
	content.Add(scrollContainer)

	// C·∫≠p nh·∫≠t UI
	content.Refresh()
}

// Hi·ªÉn th·ªã form th√™m/s·ª≠a Student
func ShowStudentForm(w fyne.Window, student *models.Student) {
	var isEditMode bool
	if student != nil {
		isEditMode = true
	}

	title := widget.NewLabel("Th√¥ng tin Sinh vi√™n")

	codeEntry := widget.NewEntry()
	codeEntry.SetPlaceHolder("Nh·∫≠p m√£ sinh vi√™n")

	nameEntry := widget.NewEntry()
	nameEntry.SetPlaceHolder("Nh·∫≠p h·ªç t√™n")

	genderEntry := widget.NewSelect([]string{"Nam", "N·ªØ"}, nil)

	dobEntry := widget.NewEntry()
	dobEntry.SetPlaceHolder("Nh·∫≠p ng√†y sinh")

	pobEntry := widget.NewEntry()
	pobEntry.SetPlaceHolder("Nh·∫≠p n∆°i sinh")

	// Ki·ªÉm tra n·∫øu student kh√¥ng ph·∫£i l√† nil
	if isEditMode {
		// G√°n gi√° tr·ªã v√†o c√°c tr∆∞·ªùng nh·∫≠p li·ªáu n·∫øu student kh√¥ng ph·∫£i l√† nil
		codeEntry.SetText(student.StudentCode)
		nameEntry.SetText(student.Name)
		genderEntry.SetSelected(student.Gender)
		dobEntry.SetText(student.DateOfBirth)
		pobEntry.SetText(student.PlaceOfBirth)
	}

	// N√∫t L∆∞u
	saveButton := widget.NewButton("üíæ L∆∞u", func() {
		studentCode := codeEntry.Text
		name := nameEntry.Text
		gender := genderEntry.Selected
		dob := dobEntry.Text
		pob := pobEntry.Text

		if isEditMode {
			models.UpdateStudent(student.ID, studentCode, name, gender, dob, pob)
		} else {
			models.AddStudent(studentCode, name, gender, dob, pob)
		}
		ShowStudentManagement(w)
	})

	// N√∫t Quay l·∫°i
	backButton := widget.NewButton("‚¨Ö Quay l·∫°i", func() {
		ShowStudentManagement(w)
	})

	form := container.NewVBox(
		title,
		widget.NewLabel("M√£ sinh vi√™n"), codeEntry,
		widget.NewLabel("H·ªç t√™n"), nameEntry,
		widget.NewLabel("Gi·ªõi t√≠nh"), genderEntry,
		widget.NewLabel("Ng√†y sinh"), dobEntry,
		widget.NewLabel("N∆°i sinh"), pobEntry,
		saveButton,
		backButton,
	)

	w.SetContent(container.NewCenter(form))
}

func ShowStudentForm1(w fyne.Window, student *models.Student) {
	var isEditMode bool
	if student != nil {
		isEditMode = true
	}

	title := widget.NewLabel("Th√¥ng tin Sinh vi√™n")

	codeEntry := widget.NewEntry()
	codeEntry.SetPlaceHolder("Nh·∫≠p m√£ sinh vi√™n")

	nameEntry := widget.NewEntry()
	nameEntry.SetPlaceHolder("Nh·∫≠p h·ªç t√™n")

	genderEntry := widget.NewSelect([]string{"Nam", "N·ªØ"}, nil)
	genderEntry.SetSelected(student.Gender)

	dobEntry := widget.NewEntry()
	dobEntry.SetPlaceHolder("Nh·∫≠p ng√†y sinh")

	pobEntry := widget.NewEntry()
	pobEntry.SetPlaceHolder("Nh·∫≠p n∆°i sinh")

	if isEditMode {
		codeEntry.SetText(student.StudentCode)
		nameEntry.SetText(student.Name)
		genderEntry.SetSelected(student.Gender)
		dobEntry.SetText(student.DateOfBirth)
		pobEntry.SetText(student.PlaceOfBirth)
	}

	// N√∫t L∆∞u
	saveButton := widget.NewButton("üíæ L∆∞u", func() {
		studentCode := codeEntry.Text
		name := nameEntry.Text
		gender := genderEntry.Selected
		dob := dobEntry.Text
		pob := pobEntry.Text

		if isEditMode {
			models.UpdateStudent(student.ID, studentCode, name, gender, dob, pob)
		} else {
			models.AddStudent(studentCode, name, gender, dob, pob)
		}
		ShowStudentManagement1(w)
	})

	// N√∫t Quay l·∫°i
	backButton := widget.NewButton("‚¨Ö Quay l·∫°i", func() {
		ShowStudentManagement1(w)
	})

	form := container.NewVBox(
		title,
		widget.NewLabel("M√£ sinh vi√™n"), codeEntry,
		widget.NewLabel("H·ªç t√™n"), nameEntry,
		widget.NewLabel("Gi·ªõi t√≠nh"), genderEntry,
		widget.NewLabel("Ng√†y sinh"), dobEntry,
		widget.NewLabel("N∆°i sinh"), pobEntry,
		saveButton,
		backButton,
	)

	w.SetContent(container.NewCenter(form))
}

// X√≥a Student
func deleteStudent(w fyne.Window, id int) {
	dialog.ShowConfirm("X√°c nh·∫≠n x√≥a", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a sinh vi√™n n√†y?", func(confirmed bool) {
		if confirmed {
			models.DeleteStudent(id)
			ShowStudentManagement(w)
		}
	}, w)
}

// H√†m nh·∫≠p sinh vi√™n t·ª´ file Excel
func importStudentsFromExcel(filePath string) ([]models.Student, error) {
	// M·ªü file Excel
	f, err := excelize.OpenFile(filePath)
	if err != nil {
		return nil, fmt.Errorf("L·ªói khi m·ªü file Excel: %v", err)
	}

	// ƒê·ªçc d·ªØ li·ªáu t·ª´ sheet ƒë·∫ßu ti√™n
	rows, err := f.GetRows("Sheet1") // ƒê·∫£m b·∫£o b·∫°n s·ª≠ d·ª•ng ƒë√∫ng t√™n sheet trong file c·ªßa b·∫°n
	if err != nil {
		return nil, fmt.Errorf("L·ªói khi ƒë·ªçc d·ªØ li·ªáu t·ª´ sheet: %v", err)
	}

	var students []models.Student
	for _, row := range rows[1:] { // B·ªè qua d√≤ng ƒë·∫ßu ti√™n (ti√™u ƒë·ªÅ)
		// Ki·ªÉm tra s·ªë l∆∞·ª£ng c·ªôt v√† ƒë·∫£m b·∫£o ƒë·ªß d·ªØ li·ªáu
		if len(row) >= 7 { // ƒê·∫£m b·∫£o c√≥ ƒë·ªß 7 c·ªôt
			student := models.Student{
				StudentCode:  row[1],                // C·ªôt 2: M√£ sinh vi√™n
				Name:         row[2] + " " + row[3], // C·ªôt 3: H·ªç, C·ªôt 4: T√™n
				Gender:       row[4],                // C·ªôt 5: Gi·ªõi t√≠nh
				DateOfBirth:  row[5],                // C·ªôt 6: Ng√†y sinh
				PlaceOfBirth: row[6],                // C·ªôt 7: N∆°i sinh
			}
			students = append(students, student)
		}
	}
	return students, nil
}

// Hi·ªÉn th·ªã h·ªôp tho·∫°i ch·ªçn file Excel
func showImportExcelDialog(w fyne.Window) {
	dialog.NewFileOpen(func(r fyne.URIReadCloser, err error) {
		if err != nil || r == nil {
			return
		}
		filePath := r.URI().Path()

		students, err := importStudentsFromExcel(filePath)
		if err != nil {
			dialog.ShowError(fmt.Errorf("L·ªói khi nh·∫≠p d·ªØ li·ªáu t·ª´ Excel: %v", err), w)
			return
		}

		// Sau khi ƒë·ªçc ƒë∆∞·ª£c danh s√°ch sinh vi√™n, b·∫°n c√≥ th·ªÉ th√™m v√†o h·ªá th·ªëng
		for _, student := range students {
			models.AddStudent(student.StudentCode, student.Name, student.Gender, student.DateOfBirth, student.PlaceOfBirth)
		}

		// C·∫≠p nh·∫≠t l·∫°i giao di·ªán danh s√°ch sinh vi√™n
		ShowStudentManagement(w)
	}, w).Show()
}
