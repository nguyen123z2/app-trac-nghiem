// internal/ui/exam_view.go
package ui

import (
	"fmt"
	"strconv"

	"exam-system/internal/auth"
	"exam-system/internal/models"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/widget"
)

// updateExamList l·∫•y danh s√°ch k·ª≥ thi. N·∫øu teacherID > 0 s·∫Ω ch·ªâ l·∫•y k·ª≥ thi c·ªßa gi√°o vi√™n ƒë√≥,
// ng∆∞·ª£c l·∫°i l·∫•y to√†n b·ªô (d√†nh cho Admin).
func updateExamList(w fyne.Window, content *fyne.Container, teacherID int) {
	var exams []models.Exam
	var err error

	if teacherID > 0 {
		exams, err = models.GetExamsByTeacher(teacherID)
	} else {
		exams, err = models.GetExams()
	}
	if err != nil {
		fmt.Println("‚ùå L·ªói khi l·∫•y danh s√°ch k·ª≥ thi:", err)
		return
	}

	// X√≥a n·ªôi dung c≈©
	content.Objects = nil

	// Ti√™u ƒë·ªÅ b·∫£ng
	headers := container.NewHBox(
		widget.NewLabelWithStyle("ID", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
		layout.NewSpacer(),
		widget.NewLabelWithStyle("T√™n K·ª≥ Thi", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
		layout.NewSpacer(),
		widget.NewLabelWithStyle("Gi√°o Vi√™n", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
		layout.NewSpacer(),
		widget.NewLabelWithStyle("B·ªô C√¢u H·ªèi", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
		layout.NewSpacer(),
		widget.NewLabelWithStyle("Thao T√°c", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
	)
	content.Add(headers)
	content.Add(widget.NewSeparator())

	// Duy·ªát qua t·ª´ng k·ª≥ thi
	for _, ex := range exams {
		e := ex // capture cho closure

		// T·∫°o n√∫t SV tu·ª≥ theo role
		var svBtn *widget.Button
		if teacherID > 0 {
			// Teacher ch·ªâ xem SV c·ªßa k·ª≥ thi m√¨nh
			svBtn = widget.NewButton("üìã SV", func() {
				ShowExamStudentsTeacher(w, e.ID)
			})
		} else {
			// Admin xem SV c·ªßa m·ªçi k·ª≥ thi
			svBtn = widget.NewButton("üìã SV", func() {
				ShowExamStudentsAdmin(w, e.ID)
			})
		}

		row := container.NewHBox(
			widget.NewLabel(strconv.Itoa(e.ID)),
			layout.NewSpacer(),
			widget.NewLabel(e.Name),
			layout.NewSpacer(),
			widget.NewLabel(strconv.Itoa(e.TeacherID)),
			layout.NewSpacer(),
			widget.NewLabel(strconv.Itoa(e.QuestionSetID)),
			layout.NewSpacer(),
			widget.NewButton("‚úèÔ∏è", func() { ShowExamForm(w, &e) }),
			widget.NewButton("üóëÔ∏è", func() { deleteExam(w, e.ID) }),
			svBtn,
		)
		content.Add(row)
		content.Add(widget.NewSeparator())
	}

	content.Refresh()
}

// ShowExamListAdmin hi·ªÉn th·ªã to√†n b·ªô k·ª≥ thi cho Admin.
func ShowExamListAdmin(w fyne.Window) {
	content := container.NewVBox()
	updateExamList(w, content, 0)

	w.SetContent(container.NewVBox(
		widget.NewLabelWithStyle("üìÖ Danh s√°ch K·ª≥ Thi (Admin)", fyne.TextAlignCenter, fyne.TextStyle{Bold: true}),
		widget.NewButton("‚ûï Th√™m K·ª≥ Thi", func() { ShowExamForm(w, nil) }),
		content,
		widget.NewButton("‚¨Ö Quay l·∫°i", func() { ShowAdminManagement(w) }),
	))
}

// ShowExamListTeacher hi·ªÉn th·ªã k·ª≥ thi c·ªßa gi√°o vi√™n ƒëang ƒëƒÉng nh·∫≠p.
func ShowExamListTeacher(w fyne.Window) {
	teacherID, err := auth.GetCurrentUserID()
	if err != nil {
		dialog.ShowInformation("L·ªói", "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c gi√°o vi√™n!", w)
		return
	}

	content := container.NewVBox()
	updateExamList(w, content, teacherID)

	w.SetContent(container.NewVBox(
		widget.NewLabelWithStyle("üìÖ Danh s√°ch K·ª≥ Thi (Teacher)", fyne.TextAlignCenter, fyne.TextStyle{Bold: true}),
		content,
		widget.NewButton("‚¨Ö Quay l·∫°i", func() { ShowTeacherDashboard(w) }),
	))
}

// ShowExamForm hi·ªÉn th·ªã form th√™m/s·ª≠a k·ª≥ thi chung cho Admin v√† Teacher.
func ShowExamForm(w fyne.Window, exam *models.Exam) {
	var isEdit bool
	if exam != nil {
		isEdit = true
	}

	nameEntry := widget.NewEntry()
	nameEntry.SetPlaceHolder("Nh·∫≠p t√™n k·ª≥ thi")
	teacherEntry := widget.NewEntry()
	teacherEntry.SetPlaceHolder("Nh·∫≠p ID gi√°o vi√™n")
	qsEntry := widget.NewEntry()
	qsEntry.SetPlaceHolder("Nh·∫≠p ID b·ªô c√¢u h·ªèi")

	if isEdit {
		nameEntry.SetText(exam.Name)
		teacherEntry.SetText(strconv.Itoa(exam.TeacherID))
		qsEntry.SetText(strconv.Itoa(exam.QuestionSetID))
	}

	saveBtn := widget.NewButton("üíæ L∆∞u", func() {
		name := nameEntry.Text
		tid, _ := strconv.Atoi(teacherEntry.Text)
		qsid, _ := strconv.Atoi(qsEntry.Text)

		if isEdit {
			models.UpdateExam(exam.ID, tid, name, qsid)
		} else {
			models.InsertExam(tid, name, qsid)
		}

		// Quay l·∫°i tu·ª≥ role
		if role, _ := auth.GetUserRole(""); role == "teacher" {
			ShowExamListTeacher(w)
		} else {
			ShowExamListAdmin(w)
		}
	})

	backBtn := widget.NewButton("‚¨Ö Quay l·∫°i", func() {
		if role, _ := auth.GetUserRole(""); role == "teacher" {
			ShowExamListTeacher(w)
		} else {
			ShowExamListAdmin(w)
		}
	})

	form := container.NewVBox(
		widget.NewLabel("Th√¥ng tin K·ª≥ Thi"),
		widget.NewLabel("T√™n k·ª≥ thi"), nameEntry,
		widget.NewLabel("ID gi√°o vi√™n"), teacherEntry,
		widget.NewLabel("ID b·ªô c√¢u h·ªèi"), qsEntry,
		saveBtn,
		backBtn,
	)
	w.SetContent(container.NewCenter(form))
}

func deleteExam(w fyne.Window, id int) {
	dialog.ShowConfirm("X√°c nh·∫≠n x√≥a", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a k·ª≥ thi n√†y?", func(ok bool) {
		if ok {
			models.DeleteExam(id)
			// refresh l·∫°i theo role
			if role, _ := auth.GetUserRole(""); role == "teacher" {
				ShowExamListTeacher(w)
			} else {
				ShowExamListAdmin(w)
			}
		}
	}, w)
}
