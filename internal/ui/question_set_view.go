// internal/ui/question_bank.go
package ui

import (
	"exam-system/internal/models"
	"fmt"
	"strings"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/widget"
)

const questionSetsPerPage = 10

// ShowQuestionBank hi·ªÉn th·ªã danh s√°ch b·ªô c√¢u h·ªèi v·ªõi ph√¢n trang v√† t√¨m ki·∫øm.
// back l√† h√†m g·ªçi ƒë·ªÉ quay v·ªÅ dashboard (Admin ho·∫∑c Teacher).
func ShowQuestionBank(w fyne.Window, back func(fyne.Window)) {
	allSets, err := models.GetQuestionSets()
	if err != nil {
		fmt.Println("‚ùå L·ªói khi l·∫•y danh s√°ch b·ªô c√¢u h·ªèi:", err)
		return
	}

	currentPage := 0
	searchEntry := widget.NewEntry()
	searchEntry.SetPlaceHolder("üîç T√¨m ki·∫øm b·ªô c√¢u h·ªèi...")

	pageLabel := widget.NewLabel("")
	listContainer := container.NewVBox()

	updateList := func() {
		listContainer.Objects = nil
		keyword := strings.ToLower(searchEntry.Text)

		// L·ªçc theo t·ª´ kh√≥a
		var filtered []models.QuestionSet
		for _, s := range allSets {
			if keyword == "" || strings.Contains(strings.ToLower(s.Name), keyword) {
				filtered = append(filtered, s)
			}
		}

		// T√≠nh t·ªïng trang
		totalPages := (len(filtered) + questionSetsPerPage - 1) / questionSetsPerPage
		if totalPages == 0 {
			pageLabel.SetText("Kh√¥ng c√≥ b·ªô c√¢u h·ªèi.")
			listContainer.Refresh()
			return
		}
		if currentPage >= totalPages {
			currentPage = totalPages - 1
		}
		start := currentPage * questionSetsPerPage
		end := start + questionSetsPerPage
		if end > len(filtered) {
			end = len(filtered)
		}

		// Hi·ªÉn th·ªã t·ª´ng ph·∫ßn
		for _, set := range filtered[start:end] {
			setCopy := set // capture
			btn := widget.NewButton(set.Name, func() {
				ShowQuestionList(w, setCopy.ID, back)
			})
			listContainer.Add(
				container.NewHBox(
					btn,
					layout.NewSpacer(),
					widget.NewButton("‚úèÔ∏è", func() {
						ShowEditQuestionSetForm(w, setCopy, back)
					}),
					widget.NewButton("üóëÔ∏è", func() {
						deleteQuestionSet(w, setCopy.ID, back)
					}),
				),
			)
		}

		pageLabel.SetText(fmt.Sprintf("Trang %d/%d", currentPage+1, totalPages))
		listContainer.Refresh()
	}

	// N√∫t ph√¢n trang
	prevBtn := widget.NewButton("‚¨Ö Trang tr∆∞·ªõc", func() {
		if currentPage > 0 {
			currentPage--
			updateList()
		}
	})
	nextBtn := widget.NewButton("Trang sau ‚û°", func() {
		// L·∫•y s·ªë l∆∞·ª£ng filtered ƒë·ªÉ ph√¢n trang ch√≠nh x√°c
		keyword := strings.ToLower(searchEntry.Text)
		count := 0
		for _, s := range allSets {
			if keyword == "" || strings.Contains(strings.ToLower(s.Name), keyword) {
				count++
			}
		}
		if (currentPage+1)*questionSetsPerPage < count {
			currentPage++
			updateList()
		}
	})

	searchEntry.OnChanged = func(_ string) {
		currentPage = 0
		updateList()
	}

	updateList()

	// C√°c n√∫t ch·ª©c nƒÉng tr√™n c√πng
	topBar := container.NewHBox(
		widget.NewButton("‚ûï Th√™m b·ªô c√¢u h·ªèi", func() {
			ShowAddQuestionSetForm(w, back)
		}),
		layout.NewSpacer(),
		widget.NewButton("üîô Quay l·∫°i", func() { back(w) }),
	)

	w.SetContent(container.NewVBox(
		topBar,
		widget.NewLabelWithStyle("üìñ Danh s√°ch b·ªô c√¢u h·ªèi", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
		searchEntry,
		listContainer,
		container.NewHBox(prevBtn, pageLabel, nextBtn),
	))
}

// ShowAddQuestionSetForm hi·ªÉn th·ªã form th√™m m·ªõi b·ªô c√¢u h·ªèi.
// back ƒë·ªÉ quay l·∫°i danh s√°ch sau khi l∆∞u ho·∫∑c hu·ª∑.
func ShowAddQuestionSetForm(w fyne.Window, back func(fyne.Window)) {
	// TODO: thay b·∫±ng teacherID th·ª±c t·∫ø t·ª´ session
	teacherID := 1

	nameEntry := widget.NewEntry()
	nameEntry.SetPlaceHolder("T√™n b·ªô c√¢u h·ªèi")

	form := widget.NewForm(
		widget.NewFormItem("T√™n b·ªô c√¢u h·ªèi", nameEntry),
	)
	form.OnSubmit = func() {
		if err := models.InsertQuestionSet(teacherID, nameEntry.Text); err != nil {
			dialog.ShowError(err, w)
		} else {
			ShowQuestionBank(w, back)
		}
	}

	w.SetContent(container.NewVBox(
		container.NewHBox(
			widget.NewLabelWithStyle("‚ûï Th√™m b·ªô c√¢u h·ªèi", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
			layout.NewSpacer(),
			widget.NewButton("üîô Quay l·∫°i", func() { ShowQuestionBank(w, back) }),
		),
		form,
	))
}

// ShowEditQuestionSetForm hi·ªÉn th·ªã form s·ª≠a b·ªô c√¢u h·ªèi.
// Nh·∫≠n th√™m back ƒë·ªÉ quay l·∫°i danh s√°ch sau khi l∆∞u.
func ShowEditQuestionSetForm(w fyne.Window, set models.QuestionSet, back func(fyne.Window)) {
	nameEntry := widget.NewEntry()
	nameEntry.SetText(set.Name)

	form := widget.NewForm(
		widget.NewFormItem("T√™n b·ªô c√¢u h·ªèi", nameEntry),
	)
	form.OnSubmit = func() {
		models.UpdateQuestionSet(set.ID, set.TeacherID, nameEntry.Text)
		ShowQuestionBank(w, back)
	}

	w.SetContent(container.NewVBox(
		container.NewHBox(
			widget.NewLabelWithStyle("‚úèÔ∏è S·ª≠a b·ªô c√¢u h·ªèi", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
			layout.NewSpacer(),
			widget.NewButton("üîô Quay l·∫°i", func() { ShowQuestionBank(w, back) }),
		),
		form,
	))
}

// deleteQuestionSet h·ªèi x√°c nh·∫≠n r·ªìi x√≥a, sau ƒë√≥ g·ªçi l·∫°i back.
func deleteQuestionSet(w fyne.Window, id int, back func(fyne.Window)) {
	dialog.ShowConfirm("X√°c nh·∫≠n x√≥a",
		"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b·ªô c√¢u h·ªèi n√†y?",
		func(ok bool) {
			if ok {
				if err := models.DeleteQuestionSet(id); err != nil {
					dialog.ShowError(err, w)
				}
				ShowQuestionBank(w, back)
			}
		},
		w)
}
